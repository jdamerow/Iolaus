//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.02.06 at 01:16:07 PM MST 
//


package edu.asu.lerna.iolaus.domain.dataset.impl;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.HashMap;
import java.util.Map;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the org.digitalhps.lerna_dataset_model package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private final static QName _NodeList_QNAME = new QName("http://digitalhps.org/lerna-Dataset-model", "NodeList");
    private final static QName _PropertyList_QNAME = new QName("http://digitalhps.org/lerna-Dataset-model", "PropertyList");
    private final static QName _DatabaseList_QNAME = new QName("http://digitalhps.org/lerna-Dataset-model", "DatabaseList");
    private final static QName _RelationList_QNAME = new QName("http://digitalhps.org/lerna-Dataset-model", "RelationList");

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link NodeList }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://digitalhps.org/lerna-Dataset-model", name = "NodeList")
    public JAXBElement<NodeList> createNodeList(NodeList value) {
        return new JAXBElement<NodeList>(_NodeList_QNAME, NodeList.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PropertyList }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://digitalhps.org/lerna-Dataset-model", name = "PropertyList")
    public JAXBElement<PropertyList> createPropertyList(PropertyList value) {
        return new JAXBElement<PropertyList>(_PropertyList_QNAME, PropertyList.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DatabaseList }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://digitalhps.org/lerna-Dataset-model", name = "DatabaseList")
    public JAXBElement<DatabaseList> createDatabaseList(DatabaseList value) {
        return new JAXBElement<DatabaseList>(_DatabaseList_QNAME, DatabaseList.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link RelationList }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://digitalhps.org/lerna-Dataset-model", name = "RelationList")
    public JAXBElement<RelationList> createRelationList(RelationList value) {
        return new JAXBElement<RelationList>(_RelationList_QNAME, RelationList.class, null, value);
    }
    
    private <T> T createInstance(Class<T> anInterface) {
        return (T) Proxy.newProxyInstance(anInterface.getClassLoader(), new Class[] {anInterface}, (InvocationHandler) new InterfaceInvocationHandler());
    }
  
    private static class InterfaceInvocationHandler implements InvocationHandler {
  
        private Map<String, Object> values = new HashMap<String, Object>();
  
        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
            String methodName = method.getName();
            if(methodName.startsWith("get")) {
                return values.get(methodName.substring(3));
            } else {
                values.put(methodName.substring(3), args[0]);
                return null;
            }
        }
    }
}
