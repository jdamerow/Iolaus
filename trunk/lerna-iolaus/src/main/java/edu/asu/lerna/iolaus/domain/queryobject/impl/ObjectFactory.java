//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.10.25 at 09:21:19 AM MST 
//


package edu.asu.lerna.iolaus.domain.queryobject.impl;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.HashMap;
import java.util.Map;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;

import edu.asu.lerna.iolaus.domain.queryobject.IDatabase;
import edu.asu.lerna.iolaus.domain.queryobject.IDataset;
import edu.asu.lerna.iolaus.domain.queryobject.INode;
import edu.asu.lerna.iolaus.domain.queryobject.IOperator;
import edu.asu.lerna.iolaus.domain.queryobject.IProperty;
import edu.asu.lerna.iolaus.domain.queryobject.IQuery;
import edu.asu.lerna.iolaus.domain.queryobject.IRelNode;
import edu.asu.lerna.iolaus.domain.queryobject.IRelationship;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the org.digitalhps.lerna_query_model package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private final static QName _Target_QNAME = new QName("http://digitalhps.org/lerna-query-model", "target");
    private final static QName _And_QNAME = new QName("http://digitalhps.org/lerna-query-model", "and");
    private final static QName _Or_QNAME = new QName("http://digitalhps.org/lerna-query-model", "or");
    private final static QName _Source_QNAME = new QName("http://digitalhps.org/lerna-query-model", "source");

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: org.digitalhps.lerna_query_model
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link Relationship }
     * 
     */
    @XmlElement(type=Relationship.class)
    public IRelationship createRelationship() {
        return new Relationship();
    }

    /**
     * Create an instance of {@link RelNode }
     * 
     */
    @XmlElement(type=RelNode.class)
    public IRelNode createRelNode() {
        return new RelNode();
    }

    /**
     * Create an instance of {@link Property }
     * 
     */
    @XmlElement(type=Property.class)
    public IProperty createProperty() {
        return new Property();
    }

    /**
     * Create an instance of {@link Operator }
     * 
     */
    @XmlElement(type=Operator.class)
    public IOperator createOperator() {
        return new Operator();
    }

    /**
     * Create an instance of {@link Node }
     * 
     */
    @XmlElement(type=Node.class)
    public INode createNode() {
    	INode node = new Node();
        return node;
    }

    /**
     * Create an instance of {@link Dataset }
     * 
     */
    @XmlElement(type=Dataset.class)
    public IDataset createDataset() {
        return new Dataset();
    }

    /**
     * Create an instance of {@link Query }
     * 
     */
    @XmlElement(type=Query.class)
    public IQuery createQuery() {
        return new Query();
    }

    /**
     * Create an instance of {@link Database }
     * 
     */
    @XmlElement(type=Database.class)
    public IDatabase createDatabase() {
        return new Database();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link RelNode }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://digitalhps.org/lerna-query-model", name = "target")
    public JAXBElement<RelNode> createTarget(RelNode value) {
        return new JAXBElement<RelNode>(_Target_QNAME, RelNode.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Operator }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://digitalhps.org/lerna-query-model", name = "and")
    public JAXBElement<Operator> createAnd(Operator value) {
        return new JAXBElement<Operator>(_And_QNAME, Operator.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Operator }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://digitalhps.org/lerna-query-model", name = "or")
    public JAXBElement<Operator> createOr(Operator value) {
        return new JAXBElement<Operator>(_Or_QNAME, Operator.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link RelNode }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://digitalhps.org/lerna-query-model", name = "source")
    public JAXBElement<RelNode> createSource(RelNode value) {
        return new JAXBElement<RelNode>(_Source_QNAME, RelNode.class, null, value);
    }
    
    private <T> T createInstance(Class<T> anInterface) {
        return (T) Proxy.newProxyInstance(anInterface.getClassLoader(), new Class[] {anInterface}, (InvocationHandler) new InterfaceInvocationHandler());
    }
  
    private static class InterfaceInvocationHandler implements InvocationHandler {
  
        private Map<String, Object> values = new HashMap<String, Object>();
  
        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
            String methodName = method.getName();
            if(methodName.startsWith("get")) {
                return values.get(methodName.substring(3));
            } else {
                values.put(methodName.substring(3), args[0]);
                return null;
            }
        }
  
    }

}
